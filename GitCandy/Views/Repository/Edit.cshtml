@model GitCandy.Models.RepositoryModel

@{
    ViewBag.Title = string.Format(SR.Shared_TitleFormat, string.Format(SR.Repository_EditTitle, Model.Name));
    var token = GitCandy.Security.Token.Current;
}

<h4>@string.Format(SR.Repository_EditTitle, Model.Name)</h4>

<div class="row">
    <div class="col-md-12">

        @using (Html.BeginForm("Edit", "Repository", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            <div class="form-group">
                @Html.LabelFor(s => s.Name, new { @class = "col-md-3 control-label lead muted" })
                <div class="col-md-5">
                    <span class="lead">@Model.Name</span>
                    @Html.HiddenFor(s => s.Name)
                </div>
            </div>
            <div class="form-group">
                <span class="text-error col-md-4">
                    @Html.ValidationMessageFor(s => s.Name)
                </span>
            </div>

            <div class="form-group">
                @Html.LabelFor(s => s.IsPrivate, new { @class = "col-md-3 control-label lead muted" })
                <div class="col-md-5">
                    <div class="switch switch-small" data-on-label="@SR.Shared_Yes" data-off-label="@SR.Shared_No">
                        @Html.CheckBoxFor(s => s.IsPrivate)
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(s => s.AllowAnonymousRead, new { @class = "col-md-3 control-label lead muted" })
                <div class="col-md-5">
                    <div class="switch switch-small" data-on-label="@SR.Shared_Yes" data-off-label="@SR.Shared_No">
                        @Html.CheckBoxFor(s => s.AllowAnonymousRead)
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(s => s.AllowAnonymousWrite, new { @class = "col-md-3 control-label lead muted" })
                <div class="col-md-5">
                    <div class="switch switch-small" data-on-label="@SR.Shared_Yes" data-off-label="@SR.Shared_No">
                        @Html.CheckBoxFor(s => s.AllowAnonymousWrite)
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(s => s.DefaultBranch, new { @class = "col-md-3 control-label lead muted" })
                <div class="col-md-3">
                    @Html.DropDownListFor(s => s.DefaultBranch, Model.LocalBranches.ToSelectListItem(Model.DefaultBranch), new { @class = "form-control lead" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(s => s.Description, new { @class = "col-md-3 control-label lead muted" })
                <div class="col-md-5">
                    @Html.TextAreaFor(s => s.Description, 4, 0, new { @class = "col-md-4 form-control lead" })
                </div>
                <div class="text-error col-md-4">
                    @Html.ValidationMessageFor(s => s.Description)
                </div>
            </div>
            <div class="form-group">
                <span class="text-error col-md-offset-3 col-md-4">
                    @Html.ValidationSummary(true, SR.Repository_UpdateUnsuccessfull, new { @class = "alert alert-error" })
                </span>
            </div>
            

            <div class="form-group">
                    <div class="col-md-offset-3 col-md-5">
                        @Html.ActionLink(SR.Shared_Back, "Detail", new { Model.Name }, new { @class = "btn btn-default" })

                        @if (token != null && (Model.CurrentUserIsOwner || token.IsSystemAdministrator))
                        {
                            @Html.ActionLink(SR.Shared_Delete, "Delete", new { Model.Name }, new { @class = "btn btn-default" })
                        }
                        <button type="reset" class="btn btn-inverse">@SR.Shared_Reset</button>
                        <button type="submit" class="btn btn-primary">@SR.Shared_Save</button>
                    </div>
            </div>
        }
    </div>
</div>
